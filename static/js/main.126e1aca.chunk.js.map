{"version":3,"sources":["components/MountainCard/index.js","components/Wrapper/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["MountainCard","props","onClick","setClicked","id","className","alt","name","src","image","Wrapper","children","Title","correctGuesses","bestScore","userMessage","App","state","mountains","gameOver","clickedMountain","filter","mountain","clicked","length","setState","i","array","j","Math","floor","random","shuffle","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"86CAYeA,G,MATM,SAAAC,GAAK,OAEvB,yBAAKC,QAAS,kBAAMD,EAAME,WAAWF,EAAMG,KAAKC,UAAU,iBACzD,yBAAKA,UAAU,iBACd,yBAAKC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCFvBC,G,MAFC,SAAAT,GAAK,OAAI,yBAAKI,UAAU,WAAWJ,EAAMU,YCK1CC,G,MALD,SAAAX,GAAK,OACf,6BACI,wBAAII,UAAU,SAAd,wB,OCEJQ,G,MAAiB,GACjBC,EAAY,EACZC,EAAc,2D,IA+GHC,E,2MAjGXC,MAAQ,CACJC,YACAL,iBACAC,YACAC,e,EAGJZ,WAAa,SAAAC,GAET,IAAIe,GAAW,EAGTD,EAAY,EAAKD,MAAMC,UAGvBE,EAAkBF,EAAUG,QAAO,SAAAC,GAAQ,OAAIA,EAASlB,KAAOA,KAkCrE,GA/BIgB,EAAgB,GAAGG,SAEnBR,EAAc,oEACdI,GAAW,GAGJN,EAAiBK,EAAUM,OAAS,GAG3CJ,EAAgB,GAAGG,SAAU,EAK7BR,EAAc,mBAFdF,EAIqBC,IACjBA,EAAYD,EACZ,EAAKY,SAAS,CAAEX,iBAMpBC,EAAc,gDACdD,EAAY,GACZ,EAAKW,SAAS,CAAEX,cAEhBK,GAAW,GAGXA,EAAU,CAEV,IAAK,IAAIO,EAAI,EAAGA,EAAIR,EAAUM,OAAQE,IAClCR,EAAUQ,GAAGH,SAAU,EAG3BV,EAAiB,GAjE7B,SAAiBc,GACb,IAAK,IAAID,EAAIC,EAAMH,OAAS,EAAGE,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAEhB,CAACC,EAAMC,GAAID,EAAMD,IAAvCC,EAAMD,GAFgC,KAE5BC,EAAMC,GAFsB,MAoEvCI,CAAQd,GAGR,EAAKO,SAAS,CAAEP,cAChB,EAAKO,SAAS,CAAEZ,mBAChB,EAAKY,SAAS,CAAEV,iB,wEAGV,IAAD,OACL,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,0BAEA,wBAAIV,UAAU,SACT4B,KAAKhB,MAAMF,aAEhB,wBAAIV,UAAU,SACV,0BAAMA,UAAU,WAAhB,sBAA8C4B,KAAKhB,MAAMJ,gBACzD,0BAAMR,UAAU,QAAhB,eAAoC4B,KAAKhB,MAAMH,YAGnD,yBAAKT,UAAU,aACX,yBAAKA,UAAU,OACV4B,KAAKhB,MAAMC,UAAUgB,KAAI,SAAAZ,GAAQ,OAC9B,kBAAC,EAAD,CACInB,WAAY,EAAKA,WACjBC,GAAIkB,EAASlB,GACb+B,IAAKb,EAASlB,GACdK,MAAOa,EAASb,kB,GA1F9B2B,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.126e1aca.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst MountainCard = props => (\n\n\t\t\t<div onClick={() => props.setClicked(props.id)} className=\"card col-md-3\">\n\t\t\t\t<div className=\"img-container\">\n\t\t\t\t\t<img alt={props.name} src={props.image} />\n\t\t\t\t</div>\n\t\t\t</div>\n);\n\nexport default MountainCard;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nconst Title = props =>\n    <div>\n        <h1 className=\"title\">Mountain Memories</h1>\n    </div>;\n\nexport default Title;","import React, { Component } from \"react\";\nimport MountainCard from \"./components/MountainCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport mountains from \"./mountains.json\";\nimport \"./App.css\";\n\nlet correctGuesses = 0;\nlet bestScore = 0;\nlet userMessage = \"To win, you must climb each mountain once and only once.\";\n\n//Fisherâ€“Yates shuffle\n//Walk the array in the reverse order and swap each element with a random one before it:\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n        [array[i], array[j]] = [array[j], array[i]];\n    };\n};\n\nclass App extends Component {\n\n    // Setting this.state.mountains to the mountain json array\n    state = {\n        mountains,\n        correctGuesses,\n        bestScore,\n        userMessage\n    };\n    //will process after user clicks an image\n    setClicked = id => {\n\n        let gameOver = false;\n\n        // Make a copy of the state mountains array to work with\n        const mountains = this.state.mountains;\n\n        // Filter for the clicked mountain\n        const clickedMountain = mountains.filter(mountain => mountain.id === id);\n\n        // If the image clicked value is already true- loser, loser\n        if (clickedMountain[0].clicked) {\n\n            userMessage = \"Sorry, you already clicked on that one.  Back down to the bottom!\"\n            gameOver = true;\n\n            // Otherwise, if clicked = false, and the user hasn't finished\n        } else if (correctGuesses < mountains.length - 1) {\n\n            // Set its value to true\n            clickedMountain[0].clicked = true;\n\n            // increment the appropriate counter\n            correctGuesses++;\n\n            userMessage = \"Keep Climbing!\";\n\n            if (correctGuesses > bestScore) {\n                bestScore = correctGuesses;\n                this.setState({ bestScore });\n            }\n\n        } else {\n\n            // They win!\n            userMessage = \"CONGRATULATIONS - You climbed every mountain!\";\n            bestScore = 12;\n            this.setState({ bestScore });\n\n            gameOver = true;\n        }\n\n        if (gameOver) {\n            //reset clicked values\n            for (let i = 0; i < mountains.length; i++) {\n                mountains[i].clicked = false;\n            }\n            // restart the guess counter\n            correctGuesses = 0;\n        }\n\n        // Shuffle the array to be rendered in a random order\n        shuffle(mountains);\n\n        // Set this.state.mountains equal to the new mountains array\n        this.setState({ mountains });\n        this.setState({ correctGuesses });\n        this.setState({ userMessage });\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>Mountain Memories</Title>\n\n                <h3 className=\"stats\">\n                    {this.state.userMessage}\n                </h3>\n                <h3 className=\"stats\">\n                    <span className=\"climbed\">Mountains Climbed: {this.state.correctGuesses}</span>\n                    <span className=\"best\">Best Score: {this.state.bestScore}</span>\n                </h3>\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {this.state.mountains.map(mountain => (\n                            <MountainCard\n                                setClicked={this.setClicked}\n                                id={mountain.id}\n                                key={mountain.id}\n                                image={mountain.image}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </Wrapper >\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}